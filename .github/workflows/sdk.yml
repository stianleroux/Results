name: SDK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # Set up .NET 8
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Set up .NET 9
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration Release

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # Set up .NET 8
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Set up .NET 9
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore
        
      - name: Set Version
        run: echo "PACKAGE_VERSION=1.$(date +'%Y%m%d.%H%M%S')" >> $GITHUB_ENV

      - name: Build
        run: dotnet build --configuration Release

      - name: Get Version from Git Tags
        id: get_version
        run: echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_ENV

      - name: Pack NuGet Package
        run: dotnet pack Results/Results.csproj --no-build --output ./nuget-packages --configuration Release /p:PackageVersion=${{ env.VERSION }}

      - name: Push NuGet Package
        run: dotnet nuget push nuget-packages/*.nupkg --skip-duplicate --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
        
      - name: Upload NuGet Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifact
          path: ./nuget-packages/

  release:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Install xmllint tool (libxml2-utils)
      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils
      
      # Get the version from the .csproj file
      - name: Get version from .csproj
        id: get_version
        run: |
          VERSION=$(xmllint --xpath "string(//Project/PropertyGroup/Version)" Results/Results.csproj)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifact
          path: ./downloaded-nuget-packages/
          
      - name: Generate release notes
        id: notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            ## Changes in this release:
            - Auto-generated release based on latest commit
            - Version: ${{ env.VERSION }}
          draft: false
          prerelease: false
      
      - name: List files in nuget-packages
        run: ls -al ./downloaded-nuget-packages/
        
      # Upload the NuGet Package as an asset in the release
      - name: Upload NuGet Package to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloaded-nuget-packages/results-${{ env.VERSION }}.nupkg 
          asset_name: results-${{ env.VERSION }}.nupkg
          asset_content_type: application/octet-stream
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}